/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.math3.analysis.interpolation;

import org.apache.commons.math3.analysis.TrivariateFunction;
import org.apache.commons.math3.exception.DimensionMismatchException;
import org.apache.commons.math3.exception.NoDataException;
import org.apache.commons.math3.exception.NonMonotonicSequenceException;
import org.apache.commons.math3.exception.OutOfRangeException;
import org.apache.commons.math3.util.MathArrays;
import gov.nasa.jpf.annotation.Conditional;
import static br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.*;

/**
 * Function that implements the
 * <a href="http://en.wikipedia.org/wiki/Tricubic_interpolation">
 * tricubic spline interpolation</a>, as proposed in
 * <blockquote>
 *  Tricubic interpolation in three dimensions,
 *  F. Lekien and J. Marsden,
 *  <em>Int. J. Numer. Meth. Eng</em> 2005; <b>63</b>:455-471
 * </blockquote>
 *
 * @since 3.4.
 */
public class TricubicInterpolatingFunction implements TrivariateFunction {

    @Conditional
    public static boolean _mut92582 = false, _mut92583 = false, _mut92584 = false, _mut92585 = false, _mut92586 = false, _mut92587 = false, _mut92588 = false, _mut92589 = false, _mut92590 = false, _mut92591 = false, _mut92592 = false, _mut92593 = false, _mut92594 = false, _mut92595 = false, _mut92596 = false, _mut92597 = false, _mut92598 = false, _mut92599 = false, _mut92600 = false, _mut92601 = false, _mut92602 = false, _mut92603 = false, _mut92604 = false, _mut92605 = false, _mut92606 = false, _mut92607 = false, _mut92608 = false, _mut92609 = false, _mut92610 = false, _mut92611 = false, _mut92612 = false, _mut92613 = false, _mut92614 = false, _mut92615 = false, _mut92616 = false, _mut92617 = false, _mut92618 = false, _mut92619 = false, _mut92620 = false, _mut92621 = false, _mut92622 = false, _mut92623 = false, _mut92624 = false, _mut92625 = false, _mut92626 = false, _mut92627 = false, _mut92628 = false, _mut92629 = false, _mut92630 = false, _mut92631 = false, _mut92632 = false, _mut92633 = false, _mut92634 = false, _mut92635 = false, _mut92636 = false, _mut92637 = false, _mut92638 = false, _mut92639 = false, _mut92640 = false, _mut92641 = false, _mut92642 = false, _mut92643 = false, _mut92644 = false, _mut92645 = false, _mut92646 = false, _mut92647 = false, _mut92648 = false, _mut92649 = false, _mut92650 = false, _mut92651 = false, _mut92652 = false, _mut92653 = false, _mut92654 = false, _mut92655 = false, _mut92656 = false, _mut92657 = false, _mut92658 = false, _mut92659 = false, _mut92660 = false, _mut92661 = false, _mut92662 = false, _mut92663 = false, _mut92664 = false, _mut92665 = false, _mut92666 = false, _mut92667 = false, _mut92668 = false, _mut92669 = false, _mut92670 = false, _mut92671 = false, _mut92672 = false, _mut92673 = false, _mut92674 = false, _mut92675 = false, _mut92676 = false, _mut92677 = false, _mut92678 = false, _mut92679 = false, _mut92680 = false, _mut92681 = false, _mut92682 = false, _mut92683 = false, _mut92684 = false, _mut92685 = false, _mut92686 = false, _mut92687 = false, _mut92688 = false, _mut92689 = false, _mut92690 = false, _mut92691 = false, _mut92692 = false, _mut92693 = false, _mut92694 = false, _mut92695 = false, _mut92696 = false, _mut92697 = false, _mut92698 = false, _mut92699 = false, _mut92700 = false, _mut92701 = false, _mut92702 = false, _mut92703 = false, _mut92704 = false, _mut92705 = false, _mut92706 = false, _mut92707 = false, _mut92708 = false, _mut92709 = false, _mut92710 = false, _mut92711 = false, _mut92712 = false, _mut92713 = false, _mut92714 = false, _mut92715 = false, _mut92716 = false, _mut92717 = false, _mut92718 = false, _mut92719 = false, _mut92720 = false, _mut92721 = false, _mut92722 = false, _mut92723 = false, _mut92724 = false, _mut92725 = false, _mut92726 = false, _mut92727 = false, _mut92728 = false, _mut92729 = false, _mut92730 = false, _mut92731 = false, _mut92732 = false, _mut92733 = false, _mut92734 = false, _mut92735 = false, _mut92736 = false, _mut92737 = false, _mut92738 = false, _mut92739 = false, _mut92740 = false, _mut92741 = false, _mut92742 = false, _mut92743 = false, _mut92744 = false, _mut92745 = false, _mut92746 = false, _mut92747 = false, _mut92748 = false, _mut92749 = false, _mut92750 = false, _mut92751 = false, _mut92752 = false, _mut92753 = false, _mut92754 = false, _mut92755 = false, _mut92756 = false, _mut92757 = false, _mut92758 = false, _mut92759 = false, _mut92760 = false, _mut92761 = false, _mut92762 = false, _mut92763 = false, _mut92764 = false, _mut92765 = false, _mut92766 = false, _mut92767 = false, _mut92768 = false, _mut92769 = false, _mut92770 = false, _mut92771 = false, _mut92772 = false, _mut92773 = false, _mut92774 = false, _mut92775 = false, _mut92776 = false, _mut92777 = false, _mut92778 = false, _mut92779 = false, _mut92780 = false, _mut92781 = false, _mut92782 = false, _mut92783 = false, _mut92784 = false, _mut92785 = false, _mut92786 = false, _mut92787 = false, _mut92788 = false, _mut92789 = false, _mut92790 = false, _mut92791 = false, _mut92792 = false, _mut92793 = false, _mut92794 = false, _mut92795 = false, _mut92796 = false, _mut92797 = false, _mut92798 = false, _mut92799 = false, _mut92800 = false, _mut92801 = false, _mut92802 = false, _mut92803 = false, _mut92804 = false, _mut92805 = false, _mut92806 = false, _mut92807 = false, _mut92808 = false, _mut92809 = false, _mut92810 = false, _mut92811 = false, _mut92812 = false, _mut92813 = false, _mut92814 = false, _mut92815 = false, _mut92816 = false, _mut92817 = false, _mut92818 = false, _mut92819 = false, _mut92820 = false, _mut92821 = false, _mut92822 = false, _mut92823 = false, _mut92824 = false, _mut92825 = false, _mut92826 = false, _mut92827 = false, _mut92828 = false, _mut92829 = false, _mut92830 = false, _mut92831 = false, _mut92832 = false, _mut92833 = false, _mut92834 = false, _mut92835 = false, _mut92836 = false, _mut92837 = false, _mut92838 = false, _mut92839 = false, _mut92840 = false, _mut92841 = false, _mut92842 = false, _mut92843 = false, _mut92844 = false, _mut92845 = false, _mut92846 = false, _mut92847 = false, _mut92848 = false, _mut92849 = false, _mut92850 = false, _mut92851 = false, _mut92852 = false, _mut92853 = false, _mut92854 = false, _mut92855 = false, _mut92856 = false, _mut92857 = false, _mut92858 = false, _mut92859 = false, _mut92860 = false, _mut92861 = false, _mut92862 = false, _mut92863 = false, _mut92864 = false, _mut92865 = false, _mut92866 = false, _mut92867 = false, _mut92868 = false, _mut92869 = false, _mut92870 = false, _mut92871 = false, _mut92872 = false, _mut92873 = false, _mut92874 = false, _mut92875 = false, _mut92876 = false, _mut92877 = false, _mut92878 = false, _mut92879 = false, _mut92880 = false, _mut92881 = false, _mut92882 = false, _mut92883 = false, _mut92884 = false, _mut92885 = false, _mut92886 = false, _mut92887 = false, _mut92888 = false, _mut92889 = false, _mut92890 = false, _mut92891 = false, _mut92892 = false, _mut92893 = false, _mut92894 = false, _mut92895 = false, _mut92896 = false, _mut92897 = false, _mut92898 = false, _mut92899 = false, _mut92900 = false, _mut92901 = false, _mut92902 = false, _mut92903 = false, _mut92904 = false, _mut92905 = false, _mut92906 = false, _mut92907 = false, _mut92908 = false, _mut92909 = false, _mut92910 = false, _mut92911 = false, _mut92912 = false, _mut92913 = false, _mut92914 = false, _mut92915 = false, _mut92916 = false, _mut92917 = false, _mut92918 = false, _mut92919 = false, _mut92920 = false, _mut92921 = false, _mut92922 = false, _mut92923 = false, _mut92924 = false, _mut92925 = false, _mut92926 = false, _mut92927 = false, _mut92928 = false, _mut92929 = false, _mut92930 = false, _mut92931 = false, _mut92932 = false, _mut92933 = false, _mut92934 = false, _mut92935 = false, _mut92936 = false, _mut92937 = false, _mut92938 = false, _mut92939 = false, _mut92940 = false, _mut92941 = false, _mut92942 = false, _mut92943 = false, _mut92944 = false, _mut92945 = false, _mut92946 = false, _mut92947 = false, _mut92948 = false, _mut92949 = false, _mut92950 = false, _mut92951 = false, _mut92952 = false, _mut92953 = false, _mut92954 = false, _mut92955 = false, _mut92956 = false, _mut92957 = false, _mut92958 = false, _mut92959 = false, _mut92960 = false, _mut92961 = false, _mut92962 = false, _mut92963 = false, _mut92964 = false, _mut92965 = false, _mut92966 = false, _mut92967 = false, _mut92968 = false, _mut92969 = false, _mut92970 = false, _mut92971 = false, _mut92972 = false, _mut92973 = false, _mut92974 = false, _mut92975 = false, _mut92976 = false, _mut92977 = false, _mut92978 = false, _mut92979 = false, _mut92980 = false, _mut92981 = false, _mut92982 = false, _mut92983 = false, _mut92984 = false, _mut92985 = false, _mut92986 = false, _mut92987 = false, _mut92988 = false, _mut92989 = false, _mut92990 = false, _mut92991 = false, _mut92992 = false, _mut92993 = false, _mut92994 = false, _mut92995 = false, _mut92996 = false, _mut92997 = false, _mut92998 = false, _mut92999 = false, _mut93000 = false, _mut93001 = false, _mut93002 = false, _mut93003 = false, _mut93004 = false, _mut93005 = false, _mut93006 = false, _mut93007 = false, _mut93008 = false, _mut93009 = false, _mut93010 = false, _mut93011 = false, _mut93012 = false, _mut93013 = false, _mut93014 = false, _mut93015 = false, _mut93016 = false, _mut93017 = false, _mut93018 = false, _mut93019 = false, _mut93020 = false, _mut93021 = false, _mut93022 = false, _mut93023 = false, _mut93024 = false, _mut93025 = false, _mut93026 = false, _mut93027 = false, _mut93028 = false, _mut93029 = false, _mut93030 = false, _mut93031 = false, _mut93032 = false, _mut93033 = false, _mut93034 = false, _mut93035 = false, _mut93036 = false, _mut93037 = false, _mut93038 = false, _mut93039 = false, _mut93040 = false, _mut93041 = false, _mut93042 = false, _mut93043 = false, _mut93044 = false, _mut93045 = false, _mut93046 = false, _mut93047 = false, _mut93048 = false, _mut93049 = false, _mut93050 = false, _mut93051 = false, _mut93052 = false, _mut93053 = false, _mut93054 = false, _mut93055 = false, _mut93056 = false, _mut93057 = false, _mut93058 = false, _mut93059 = false, _mut93060 = false, _mut93061 = false, _mut93062 = false, _mut93063 = false, _mut93064 = false, _mut93065 = false, _mut93066 = false, _mut93067 = false, _mut93068 = false, _mut93069 = false, _mut93070 = false, _mut93071 = false, _mut93072 = false, _mut93073 = false, _mut93074 = false, _mut93075 = false, _mut93076 = false, _mut93077 = false, _mut93078 = false, _mut93079 = false, _mut93080 = false, _mut93081 = false, _mut93082 = false, _mut93083 = false, _mut93084 = false, _mut93085 = false, _mut93086 = false, _mut93087 = false, _mut93088 = false, _mut93089 = false, _mut93090 = false, _mut93091 = false, _mut93092 = false, _mut93093 = false, _mut93094 = false, _mut93095 = false, _mut93096 = false, _mut93097 = false, _mut93098 = false, _mut93099 = false, _mut93100 = false, _mut93101 = false, _mut93102 = false, _mut93103 = false, _mut93104 = false, _mut93105 = false, _mut93106 = false, _mut93107 = false, _mut93108 = false, _mut93109 = false, _mut93110 = false, _mut93111 = false, _mut93112 = false, _mut93113 = false, _mut93114 = false, _mut93115 = false, _mut93116 = false, _mut93117 = false, _mut93118 = false, _mut93119 = false, _mut93120 = false, _mut93121 = false, _mut93122 = false, _mut93123 = false, _mut93124 = false, _mut93125 = false, _mut93126 = false, _mut93127 = false, _mut93128 = false, _mut93129 = false, _mut93130 = false, _mut93131 = false, _mut93132 = false, _mut93133 = false, _mut93134 = false, _mut93135 = false, _mut93136 = false, _mut93137 = false, _mut93138 = false, _mut93139 = false, _mut93140 = false, _mut93141 = false, _mut93142 = false, _mut93143 = false, _mut93144 = false, _mut93145 = false, _mut93146 = false, _mut93147 = false, _mut93148 = false, _mut93149 = false, _mut93150 = false, _mut93151 = false, _mut93152 = false, _mut93153 = false, _mut93154 = false, _mut93155 = false, _mut93156 = false, _mut93157 = false, _mut93158 = false, _mut93159 = false, _mut93160 = false, _mut93161 = false, _mut93162 = false, _mut93163 = false, _mut93164 = false, _mut93165 = false, _mut93166 = false, _mut93167 = false, _mut93168 = false, _mut93169 = false, _mut93170 = false, _mut93171 = false, _mut93172 = false, _mut93173 = false, _mut93174 = false, _mut93175 = false, _mut93176 = false;

    /**
     * Matrix to compute the spline coefficients from the function values
     * and function derivatives values
     */
    private static final double[][] AINV = { { 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { -3, 3, 0, 0, 0, 0, 0, 0, -2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 2, -2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { -3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 9, -9, -9, 9, 0, 0, 0, 0, 6, 3, -6, -3, 0, 0, 0, 0, 6, -6, 3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { -6, 6, 6, -6, 0, 0, 0, 0, -3, -3, 3, 3, 0, 0, 0, 0, -4, 4, -2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 2, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { -6, 6, 6, -6, 0, 0, 0, 0, -4, -2, 4, 2, 0, 0, 0, 0, -3, 3, -3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -1, -2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 4, -4, -4, 4, 0, 0, 0, 0, 2, 2, -2, -2, 0, 0, 0, 0, 2, -2, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0, -2, -1, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -2, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -1, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, -9, -9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 3, -6, -3, 0, 0, 0, 0, 6, -6, 3, -3, 0, 0, 0, 0, 4, 2, 2, 1, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 6, 6, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, 3, 3, 0, 0, 0, 0, -4, 4, -2, 2, 0, 0, 0, 0, -2, -2, -1, -1, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 6, 6, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, -2, 4, 2, 0, 0, 0, 0, -3, 3, -3, 3, 0, 0, 0, 0, -2, -1, -2, -1, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, -4, -4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, -2, -2, 0, 0, 0, 0, 2, -2, 2, -2, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0 }, { -3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 9, -9, 0, 0, -9, 9, 0, 0, 6, 3, 0, 0, -6, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, -6, 0, 0, 3, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 2, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { -6, 6, 0, 0, 6, -6, 0, 0, -3, -3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 4, 0, 0, -2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -2, 0, 0, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, 0, 0, -1, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, -9, 0, 0, -9, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 3, 0, 0, -6, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, -6, 0, 0, 3, -3, 0, 0, 4, 2, 0, 0, 2, 1, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 6, 0, 0, 6, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, -3, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 4, 0, 0, -2, 2, 0, 0, -2, -2, 0, 0, -1, -1, 0, 0 }, { 9, 0, -9, 0, -9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 3, 0, -6, 0, -3, 0, 6, 0, -6, 0, 3, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 2, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, -9, 0, -9, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 3, 0, -6, 0, -3, 0, 6, 0, -6, 0, 3, 0, -3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 2, 0, 2, 0, 1, 0 }, { -27, 27, 27, -27, 27, -27, -27, 27, -18, -9, 18, 9, 18, 9, -18, -9, -18, 18, -9, 9, 18, -18, 9, -9, -18, 18, 18, -18, -9, 9, 9, -9, -12, -6, -6, -3, 12, 6, 6, 3, -12, -6, 12, 6, -6, -3, 6, 3, -12, 12, -6, 6, -6, 6, -3, 3, -8, -4, -4, -2, -4, -2, -2, -1 }, { 18, -18, -18, 18, -18, 18, 18, -18, 9, 9, -9, -9, -9, -9, 9, 9, 12, -12, 6, -6, -12, 12, -6, 6, 12, -12, -12, 12, 6, -6, -6, 6, 6, 6, 3, 3, -6, -6, -3, -3, 6, 6, -6, -6, 3, 3, -3, -3, 8, -8, 4, -4, 4, -4, 2, -2, 4, 4, 2, 2, 2, 2, 1, 1 }, { -6, 0, 6, 0, 6, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, -3, 0, 3, 0, 3, 0, -4, 0, 4, 0, -2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -2, 0, -1, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 6, 0, 6, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 0, -3, 0, 3, 0, 3, 0, -4, 0, 4, 0, -2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -2, 0, -1, 0, -1, 0 }, { 18, -18, -18, 18, -18, 18, 18, -18, 12, 6, -12, -6, -12, -6, 12, 6, 9, -9, 9, -9, -9, 9, -9, 9, 12, -12, -12, 12, 6, -6, -6, 6, 6, 3, 6, 3, -6, -3, -6, -3, 8, 4, -8, -4, 4, 2, -4, -2, 6, -6, 6, -6, 3, -3, 3, -3, 4, 2, 4, 2, 2, 1, 2, 1 }, { -12, 12, 12, -12, 12, -12, -12, 12, -6, -6, 6, 6, 6, 6, -6, -6, -6, 6, -6, 6, 6, -6, 6, -6, -8, 8, 8, -8, -4, 4, 4, -4, -3, -3, -3, -3, 3, 3, 3, 3, -4, -4, 4, 4, -2, -2, 2, 2, -4, 4, -4, 4, -2, 2, -2, 2, -2, -2, -2, -2, -1, -1, -1, -1 }, { 2, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { -6, 6, 0, 0, 6, -6, 0, 0, -4, -2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0, -3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -1, 0, 0, -2, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 4, -4, 0, 0, -4, 4, 0, 0, 2, 2, 0, 0, -2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -2, 0, 0, 2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -6, 6, 0, 0, 6, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, -2, 0, 0, 4, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -3, 3, 0, 0, -3, 3, 0, 0, -2, -1, 0, 0, -2, -1, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, -4, 0, 0, -4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 0, -2, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, -2, 0, 0, 2, -2, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0 }, { -6, 0, 6, 0, 6, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -2, 0, 4, 0, 2, 0, -3, 0, 3, 0, -3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -1, 0, -2, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, -6, 0, 6, 0, 6, 0, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -4, 0, -2, 0, 4, 0, 2, 0, -3, 0, 3, 0, -3, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, 0, -1, 0, -2, 0, -1, 0 }, { 18, -18, -18, 18, -18, 18, 18, -18, 12, 6, -12, -6, -12, -6, 12, 6, 12, -12, 6, -6, -12, 12, -6, 6, 9, -9, -9, 9, 9, -9, -9, 9, 8, 4, 4, 2, -8, -4, -4, -2, 6, 3, -6, -3, 6, 3, -6, -3, 6, -6, 3, -3, 6, -6, 3, -3, 4, 2, 2, 1, 4, 2, 2, 1 }, { -12, 12, 12, -12, 12, -12, -12, 12, -6, -6, 6, 6, 6, 6, -6, -6, -8, 8, -4, 4, 8, -8, 4, -4, -6, 6, 6, -6, -6, 6, 6, -6, -4, -4, -2, -2, 4, 4, 2, 2, -3, -3, 3, 3, -3, -3, 3, 3, -4, 4, -2, 2, -4, 4, -2, 2, -2, -2, -1, -1, -2, -2, -1, -1 }, { 4, 0, -4, 0, -4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, -2, 0, -2, 0, 2, 0, -2, 0, 2, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 }, { 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, -4, 0, -4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, -2, 0, -2, 0, 2, 0, -2, 0, 2, 0, -2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0 }, { -12, 12, 12, -12, 12, -12, -12, 12, -8, -4, 8, 4, 8, 4, -8, -4, -6, 6, -6, 6, 6, -6, 6, -6, -6, 6, 6, -6, -6, 6, 6, -6, -4, -2, -4, -2, 4, 2, 4, 2, -4, -2, 4, 2, -4, -2, 4, 2, -3, 3, -3, 3, -3, 3, -3, 3, -2, -1, -2, -1, -2, -1, -2, -1 }, { 8, -8, -8, 8, -8, 8, 8, -8, 4, 4, -4, -4, -4, -4, 4, 4, 4, -4, 4, -4, -4, 4, -4, 4, 4, -4, -4, 4, 4, -4, -4, 4, 2, 2, 2, 2, -2, -2, -2, -2, 2, 2, -2, -2, 2, 2, -2, -2, 2, -2, 2, -2, 2, -2, 2, -2, 1, 1, 1, 1, 1, 1, 1, 1 } };

    /**
     * Samples x-coordinates
     */
    private final double[] xval;

    /**
     * Samples y-coordinates
     */
    private final double[] yval;

    /**
     * Samples z-coordinates
     */
    private final double[] zval;

    /**
     * Set of cubic splines patching the whole data grid
     */
    private final TricubicFunction[][][] splines;

    /**
     * @param x Sample values of the x-coordinate, in increasing order.
     * @param y Sample values of the y-coordinate, in increasing order.
     * @param z Sample values of the y-coordinate, in increasing order.
     * @param f Values of the function on every grid point.
     * @param dFdX Values of the partial derivative of function with respect to x on every grid point.
     * @param dFdY Values of the partial derivative of function with respect to y on every grid point.
     * @param dFdZ Values of the partial derivative of function with respect to z on every grid point.
     * @param d2FdXdY Values of the cross partial derivative of function on every grid point.
     * @param d2FdXdZ Values of the cross partial derivative of function on every grid point.
     * @param d2FdYdZ Values of the cross partial derivative of function on every grid point.
     * @param d3FdXdYdZ Values of the cross partial derivative of function on every grid point.
     * @throws NoDataException if any of the arrays has zero length.
     * @throws DimensionMismatchException if the various arrays do not contain the expected number of elements.
     * @throws NonMonotonicSequenceException if {@code x}, {@code y} or {@code z} are not strictly increasing.
     */
    public TricubicInterpolatingFunction(double[] x, double[] y, double[] z, double[][][] f, double[][][] dFdX, double[][][] dFdY, double[][][] dFdZ, double[][][] d2FdXdY, double[][][] d2FdXdZ, double[][][] d2FdYdZ, double[][][] d3FdXdYdZ) throws NoDataException, DimensionMismatchException, NonMonotonicSequenceException {
        br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136");
        final int xLen = x.length;
        final int yLen = y.length;
        final int zLen = z.length;
        if ((_mut92610 ? ((_mut92604 ? ((_mut92598 ? ((_mut92592 ? (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) && ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591)) : (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) || ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591))) && ROR_equals(z.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92593, _mut92594, _mut92595, _mut92596, _mut92597)) : ((_mut92592 ? (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) && ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591)) : (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) || ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591))) || ROR_equals(z.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92593, _mut92594, _mut92595, _mut92596, _mut92597))) && ROR_equals(f.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92599, _mut92600, _mut92601, _mut92602, _mut92603)) : ((_mut92598 ? ((_mut92592 ? (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) && ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591)) : (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) || ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591))) && ROR_equals(z.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92593, _mut92594, _mut92595, _mut92596, _mut92597)) : ((_mut92592 ? (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) && ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591)) : (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) || ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591))) || ROR_equals(z.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92593, _mut92594, _mut92595, _mut92596, _mut92597))) || ROR_equals(f.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92599, _mut92600, _mut92601, _mut92602, _mut92603))) && ROR_equals(f[0].length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92605, _mut92606, _mut92607, _mut92608, _mut92609)) : ((_mut92604 ? ((_mut92598 ? ((_mut92592 ? (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) && ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591)) : (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) || ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591))) && ROR_equals(z.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92593, _mut92594, _mut92595, _mut92596, _mut92597)) : ((_mut92592 ? (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) && ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591)) : (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) || ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591))) || ROR_equals(z.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92593, _mut92594, _mut92595, _mut92596, _mut92597))) && ROR_equals(f.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92599, _mut92600, _mut92601, _mut92602, _mut92603)) : ((_mut92598 ? ((_mut92592 ? (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) && ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591)) : (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) || ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591))) && ROR_equals(z.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92593, _mut92594, _mut92595, _mut92596, _mut92597)) : ((_mut92592 ? (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) && ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591)) : (ROR_equals(xLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92582, _mut92583, _mut92584, _mut92585, _mut92586) || ROR_equals(yLen, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92587, _mut92588, _mut92589, _mut92590, _mut92591))) || ROR_equals(z.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92593, _mut92594, _mut92595, _mut92596, _mut92597))) || ROR_equals(f.length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92599, _mut92600, _mut92601, _mut92602, _mut92603))) || ROR_equals(f[0].length, 0, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92605, _mut92606, _mut92607, _mut92608, _mut92609)))) {
            throw new NoDataException();
        }
        if (ROR_not_equals(xLen, f.length, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92611, _mut92612, _mut92613, _mut92614, _mut92615)) {
            throw new DimensionMismatchException(xLen, f.length);
        }
        if (ROR_not_equals(xLen, dFdX.length, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92616, _mut92617, _mut92618, _mut92619, _mut92620)) {
            throw new DimensionMismatchException(xLen, dFdX.length);
        }
        if (ROR_not_equals(xLen, dFdY.length, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92621, _mut92622, _mut92623, _mut92624, _mut92625)) {
            throw new DimensionMismatchException(xLen, dFdY.length);
        }
        if (ROR_not_equals(xLen, dFdZ.length, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92626, _mut92627, _mut92628, _mut92629, _mut92630)) {
            throw new DimensionMismatchException(xLen, dFdZ.length);
        }
        if (ROR_not_equals(xLen, d2FdXdY.length, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92631, _mut92632, _mut92633, _mut92634, _mut92635)) {
            throw new DimensionMismatchException(xLen, d2FdXdY.length);
        }
        if (ROR_not_equals(xLen, d2FdXdZ.length, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92636, _mut92637, _mut92638, _mut92639, _mut92640)) {
            throw new DimensionMismatchException(xLen, d2FdXdZ.length);
        }
        if (ROR_not_equals(xLen, d2FdYdZ.length, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92641, _mut92642, _mut92643, _mut92644, _mut92645)) {
            throw new DimensionMismatchException(xLen, d2FdYdZ.length);
        }
        if (ROR_not_equals(xLen, d3FdXdYdZ.length, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92646, _mut92647, _mut92648, _mut92649, _mut92650)) {
            throw new DimensionMismatchException(xLen, d3FdXdYdZ.length);
        }
        MathArrays.checkOrder(x);
        MathArrays.checkOrder(y);
        MathArrays.checkOrder(z);
        xval = x.clone();
        yval = y.clone();
        zval = z.clone();
        final int lastI = AOR_minus(xLen, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92651, _mut92652, _mut92653, _mut92654);
        final int lastJ = AOR_minus(yLen, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92655, _mut92656, _mut92657, _mut92658);
        final int lastK = AOR_minus(zLen, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92659, _mut92660, _mut92661, _mut92662);
        splines = new TricubicFunction[lastI][lastJ][lastK];
        for (int i = 0; ROR_less(i, lastI, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut93017, _mut93018, _mut93019, _mut93020, _mut93021); i++) {
            br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136");
            if (ROR_not_equals(f[i].length, yLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92663, _mut92664, _mut92665, _mut92666, _mut92667)) {
                throw new DimensionMismatchException(f[i].length, yLen);
            }
            if (ROR_not_equals(dFdX[i].length, yLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92668, _mut92669, _mut92670, _mut92671, _mut92672)) {
                throw new DimensionMismatchException(dFdX[i].length, yLen);
            }
            if (ROR_not_equals(dFdY[i].length, yLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92673, _mut92674, _mut92675, _mut92676, _mut92677)) {
                throw new DimensionMismatchException(dFdY[i].length, yLen);
            }
            if (ROR_not_equals(dFdZ[i].length, yLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92678, _mut92679, _mut92680, _mut92681, _mut92682)) {
                throw new DimensionMismatchException(dFdZ[i].length, yLen);
            }
            if (ROR_not_equals(d2FdXdY[i].length, yLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92683, _mut92684, _mut92685, _mut92686, _mut92687)) {
                throw new DimensionMismatchException(d2FdXdY[i].length, yLen);
            }
            if (ROR_not_equals(d2FdXdZ[i].length, yLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92688, _mut92689, _mut92690, _mut92691, _mut92692)) {
                throw new DimensionMismatchException(d2FdXdZ[i].length, yLen);
            }
            if (ROR_not_equals(d2FdYdZ[i].length, yLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92693, _mut92694, _mut92695, _mut92696, _mut92697)) {
                throw new DimensionMismatchException(d2FdYdZ[i].length, yLen);
            }
            if (ROR_not_equals(d3FdXdYdZ[i].length, yLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92698, _mut92699, _mut92700, _mut92701, _mut92702)) {
                throw new DimensionMismatchException(d3FdXdYdZ[i].length, yLen);
            }
            final int ip1 = AOR_plus(i, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92703, _mut92704, _mut92705, _mut92706);
            final double xR = AOR_minus(xval[ip1], xval[i], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92707, _mut92708, _mut92709, _mut92710);
            for (int j = 0; ROR_less(j, lastJ, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut93012, _mut93013, _mut93014, _mut93015, _mut93016); j++) {
                br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136");
                if (ROR_not_equals(f[i][j].length, zLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92711, _mut92712, _mut92713, _mut92714, _mut92715)) {
                    throw new DimensionMismatchException(f[i][j].length, zLen);
                }
                if (ROR_not_equals(dFdX[i][j].length, zLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92716, _mut92717, _mut92718, _mut92719, _mut92720)) {
                    throw new DimensionMismatchException(dFdX[i][j].length, zLen);
                }
                if (ROR_not_equals(dFdY[i][j].length, zLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92721, _mut92722, _mut92723, _mut92724, _mut92725)) {
                    throw new DimensionMismatchException(dFdY[i][j].length, zLen);
                }
                if (ROR_not_equals(dFdZ[i][j].length, zLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92726, _mut92727, _mut92728, _mut92729, _mut92730)) {
                    throw new DimensionMismatchException(dFdZ[i][j].length, zLen);
                }
                if (ROR_not_equals(d2FdXdY[i][j].length, zLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92731, _mut92732, _mut92733, _mut92734, _mut92735)) {
                    throw new DimensionMismatchException(d2FdXdY[i][j].length, zLen);
                }
                if (ROR_not_equals(d2FdXdZ[i][j].length, zLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92736, _mut92737, _mut92738, _mut92739, _mut92740)) {
                    throw new DimensionMismatchException(d2FdXdZ[i][j].length, zLen);
                }
                if (ROR_not_equals(d2FdYdZ[i][j].length, zLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92741, _mut92742, _mut92743, _mut92744, _mut92745)) {
                    throw new DimensionMismatchException(d2FdYdZ[i][j].length, zLen);
                }
                if (ROR_not_equals(d3FdXdYdZ[i][j].length, zLen, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92746, _mut92747, _mut92748, _mut92749, _mut92750)) {
                    throw new DimensionMismatchException(d3FdXdYdZ[i][j].length, zLen);
                }
                final int jp1 = AOR_plus(j, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92751, _mut92752, _mut92753, _mut92754);
                final double yR = AOR_minus(yval[jp1], yval[j], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92755, _mut92756, _mut92757, _mut92758);
                final double xRyR = AOR_multiply(xR, yR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92759, _mut92760, _mut92761, _mut92762);
                for (int k = 0; ROR_less(k, lastK, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut93007, _mut93008, _mut93009, _mut93010, _mut93011); k++) {
                    br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136");
                    final int kp1 = AOR_plus(k, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92763, _mut92764, _mut92765, _mut92766);
                    final double zR = AOR_minus(zval[kp1], zval[k], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92767, _mut92768, _mut92769, _mut92770);
                    final double xRzR = AOR_multiply(xR, zR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92771, _mut92772, _mut92773, _mut92774);
                    final double yRzR = AOR_multiply(yR, zR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92775, _mut92776, _mut92777, _mut92778);
                    final double xRyRzR = AOR_multiply(xR, yRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92779, _mut92780, _mut92781, _mut92782);
                    final double[] beta = new double[] { f[i][j][k], f[ip1][j][k], f[i][jp1][k], f[ip1][jp1][k], f[i][j][kp1], f[ip1][j][kp1], f[i][jp1][kp1], f[ip1][jp1][kp1], AOR_multiply(dFdX[i][j][k], xR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92783, _mut92784, _mut92785, _mut92786), AOR_multiply(dFdX[ip1][j][k], xR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92787, _mut92788, _mut92789, _mut92790), AOR_multiply(dFdX[i][jp1][k], xR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92791, _mut92792, _mut92793, _mut92794), AOR_multiply(dFdX[ip1][jp1][k], xR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92795, _mut92796, _mut92797, _mut92798), AOR_multiply(dFdX[i][j][kp1], xR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92799, _mut92800, _mut92801, _mut92802), AOR_multiply(dFdX[ip1][j][kp1], xR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92803, _mut92804, _mut92805, _mut92806), AOR_multiply(dFdX[i][jp1][kp1], xR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92807, _mut92808, _mut92809, _mut92810), AOR_multiply(dFdX[ip1][jp1][kp1], xR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92811, _mut92812, _mut92813, _mut92814), AOR_multiply(dFdY[i][j][k], yR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92815, _mut92816, _mut92817, _mut92818), AOR_multiply(dFdY[ip1][j][k], yR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92819, _mut92820, _mut92821, _mut92822), AOR_multiply(dFdY[i][jp1][k], yR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92823, _mut92824, _mut92825, _mut92826), AOR_multiply(dFdY[ip1][jp1][k], yR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92827, _mut92828, _mut92829, _mut92830), AOR_multiply(dFdY[i][j][kp1], yR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92831, _mut92832, _mut92833, _mut92834), AOR_multiply(dFdY[ip1][j][kp1], yR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92835, _mut92836, _mut92837, _mut92838), AOR_multiply(dFdY[i][jp1][kp1], yR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92839, _mut92840, _mut92841, _mut92842), AOR_multiply(dFdY[ip1][jp1][kp1], yR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92843, _mut92844, _mut92845, _mut92846), AOR_multiply(dFdZ[i][j][k], zR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92847, _mut92848, _mut92849, _mut92850), AOR_multiply(dFdZ[ip1][j][k], zR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92851, _mut92852, _mut92853, _mut92854), AOR_multiply(dFdZ[i][jp1][k], zR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92855, _mut92856, _mut92857, _mut92858), AOR_multiply(dFdZ[ip1][jp1][k], zR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92859, _mut92860, _mut92861, _mut92862), AOR_multiply(dFdZ[i][j][kp1], zR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92863, _mut92864, _mut92865, _mut92866), AOR_multiply(dFdZ[ip1][j][kp1], zR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92867, _mut92868, _mut92869, _mut92870), AOR_multiply(dFdZ[i][jp1][kp1], zR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92871, _mut92872, _mut92873, _mut92874), AOR_multiply(dFdZ[ip1][jp1][kp1], zR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92875, _mut92876, _mut92877, _mut92878), AOR_multiply(d2FdXdY[i][j][k], xRyR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92879, _mut92880, _mut92881, _mut92882), AOR_multiply(d2FdXdY[ip1][j][k], xRyR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92883, _mut92884, _mut92885, _mut92886), AOR_multiply(d2FdXdY[i][jp1][k], xRyR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92887, _mut92888, _mut92889, _mut92890), AOR_multiply(d2FdXdY[ip1][jp1][k], xRyR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92891, _mut92892, _mut92893, _mut92894), AOR_multiply(d2FdXdY[i][j][kp1], xRyR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92895, _mut92896, _mut92897, _mut92898), AOR_multiply(d2FdXdY[ip1][j][kp1], xRyR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92899, _mut92900, _mut92901, _mut92902), AOR_multiply(d2FdXdY[i][jp1][kp1], xRyR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92903, _mut92904, _mut92905, _mut92906), AOR_multiply(d2FdXdY[ip1][jp1][kp1], xRyR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92907, _mut92908, _mut92909, _mut92910), AOR_multiply(d2FdXdZ[i][j][k], xRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92911, _mut92912, _mut92913, _mut92914), AOR_multiply(d2FdXdZ[ip1][j][k], xRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92915, _mut92916, _mut92917, _mut92918), AOR_multiply(d2FdXdZ[i][jp1][k], xRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92919, _mut92920, _mut92921, _mut92922), AOR_multiply(d2FdXdZ[ip1][jp1][k], xRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92923, _mut92924, _mut92925, _mut92926), AOR_multiply(d2FdXdZ[i][j][kp1], xRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92927, _mut92928, _mut92929, _mut92930), AOR_multiply(d2FdXdZ[ip1][j][kp1], xRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92931, _mut92932, _mut92933, _mut92934), AOR_multiply(d2FdXdZ[i][jp1][kp1], xRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92935, _mut92936, _mut92937, _mut92938), AOR_multiply(d2FdXdZ[ip1][jp1][kp1], xRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92939, _mut92940, _mut92941, _mut92942), AOR_multiply(d2FdYdZ[i][j][k], yRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92943, _mut92944, _mut92945, _mut92946), AOR_multiply(d2FdYdZ[ip1][j][k], yRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92947, _mut92948, _mut92949, _mut92950), AOR_multiply(d2FdYdZ[i][jp1][k], yRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92951, _mut92952, _mut92953, _mut92954), AOR_multiply(d2FdYdZ[ip1][jp1][k], yRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92955, _mut92956, _mut92957, _mut92958), AOR_multiply(d2FdYdZ[i][j][kp1], yRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92959, _mut92960, _mut92961, _mut92962), AOR_multiply(d2FdYdZ[ip1][j][kp1], yRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92963, _mut92964, _mut92965, _mut92966), AOR_multiply(d2FdYdZ[i][jp1][kp1], yRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92967, _mut92968, _mut92969, _mut92970), AOR_multiply(d2FdYdZ[ip1][jp1][kp1], yRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92971, _mut92972, _mut92973, _mut92974), AOR_multiply(d3FdXdYdZ[i][j][k], xRyRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92975, _mut92976, _mut92977, _mut92978), AOR_multiply(d3FdXdYdZ[ip1][j][k], xRyRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92979, _mut92980, _mut92981, _mut92982), AOR_multiply(d3FdXdYdZ[i][jp1][k], xRyRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92983, _mut92984, _mut92985, _mut92986), AOR_multiply(d3FdXdYdZ[ip1][jp1][k], xRyRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92987, _mut92988, _mut92989, _mut92990), AOR_multiply(d3FdXdYdZ[i][j][kp1], xRyRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92991, _mut92992, _mut92993, _mut92994), AOR_multiply(d3FdXdYdZ[ip1][j][kp1], xRyRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92995, _mut92996, _mut92997, _mut92998), AOR_multiply(d3FdXdYdZ[i][jp1][kp1], xRyRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut92999, _mut93000, _mut93001, _mut93002), AOR_multiply(d3FdXdYdZ[ip1][jp1][kp1], xRyRzR, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.TricubicInterpolatingFunction_136", _mut93003, _mut93004, _mut93005, _mut93006) };
                    splines[i][j][k] = new TricubicFunction(computeCoefficients(beta));
                }
            }
        }
    }

    /**
     * {@inheritDoc}
     *
     * @throws OutOfRangeException if any of the variables is outside its interpolation range.
     */
    public double value(double x, double y, double z) throws OutOfRangeException {
        br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312");
        final int i = searchIndex(x, xval);
        if (ROR_equals(i, -1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93022, _mut93023, _mut93024, _mut93025, _mut93026)) {
            throw new OutOfRangeException(x, xval[0], xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93027, _mut93028, _mut93029, _mut93030)]);
        }
        final int j = searchIndex(y, yval);
        if (ROR_equals(j, -1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93031, _mut93032, _mut93033, _mut93034, _mut93035)) {
            throw new OutOfRangeException(y, yval[0], yval[AOR_minus(yval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93036, _mut93037, _mut93038, _mut93039)]);
        }
        final int k = searchIndex(z, zval);
        if (ROR_equals(k, -1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93040, _mut93041, _mut93042, _mut93043, _mut93044)) {
            throw new OutOfRangeException(z, zval[0], zval[AOR_minus(zval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93045, _mut93046, _mut93047, _mut93048)]);
        }
        final double xN = AOR_divide((AOR_minus(x, xval[i], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93049, _mut93050, _mut93051, _mut93052)), (AOR_minus(xval[AOR_plus(i, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93053, _mut93054, _mut93055, _mut93056)], xval[i], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93057, _mut93058, _mut93059, _mut93060)), "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93061, _mut93062, _mut93063, _mut93064);
        final double yN = AOR_divide((AOR_minus(y, yval[j], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93065, _mut93066, _mut93067, _mut93068)), (AOR_minus(yval[AOR_plus(j, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93069, _mut93070, _mut93071, _mut93072)], yval[j], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93073, _mut93074, _mut93075, _mut93076)), "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93077, _mut93078, _mut93079, _mut93080);
        final double zN = AOR_divide((AOR_minus(z, zval[k], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93081, _mut93082, _mut93083, _mut93084)), (AOR_minus(zval[AOR_plus(k, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93085, _mut93086, _mut93087, _mut93088)], zval[k], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93089, _mut93090, _mut93091, _mut93092)), "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.value_312", _mut93093, _mut93094, _mut93095, _mut93096);
        return splines[i][j][k].value(xN, yN, zN);
    }

    /**
     * Indicates whether a point is within the interpolation range.
     *
     * @param x First coordinate.
     * @param y Second coordinate.
     * @param z Third coordinate.
     * @return {@code true} if (x, y, z) is a valid point.
     */
    public boolean isValidPoint(double x, double y, double z) {
        br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342");
        if ((_mut93143 ? ((_mut93133 ? ((_mut93127 ? ((_mut93117 ? ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) && ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116)) : ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) || ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116))) && ROR_greater(y, yval[AOR_minus(yval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93118, _mut93119, _mut93120, _mut93121)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93122, _mut93123, _mut93124, _mut93125, _mut93126)) : ((_mut93117 ? ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) && ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116)) : ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) || ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116))) || ROR_greater(y, yval[AOR_minus(yval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93118, _mut93119, _mut93120, _mut93121)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93122, _mut93123, _mut93124, _mut93125, _mut93126))) && ROR_less(z, zval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93128, _mut93129, _mut93130, _mut93131, _mut93132)) : ((_mut93127 ? ((_mut93117 ? ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) && ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116)) : ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) || ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116))) && ROR_greater(y, yval[AOR_minus(yval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93118, _mut93119, _mut93120, _mut93121)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93122, _mut93123, _mut93124, _mut93125, _mut93126)) : ((_mut93117 ? ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) && ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116)) : ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) || ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116))) || ROR_greater(y, yval[AOR_minus(yval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93118, _mut93119, _mut93120, _mut93121)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93122, _mut93123, _mut93124, _mut93125, _mut93126))) || ROR_less(z, zval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93128, _mut93129, _mut93130, _mut93131, _mut93132))) && ROR_greater(z, zval[AOR_minus(zval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93134, _mut93135, _mut93136, _mut93137)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93138, _mut93139, _mut93140, _mut93141, _mut93142)) : ((_mut93133 ? ((_mut93127 ? ((_mut93117 ? ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) && ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116)) : ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) || ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116))) && ROR_greater(y, yval[AOR_minus(yval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93118, _mut93119, _mut93120, _mut93121)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93122, _mut93123, _mut93124, _mut93125, _mut93126)) : ((_mut93117 ? ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) && ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116)) : ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) || ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116))) || ROR_greater(y, yval[AOR_minus(yval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93118, _mut93119, _mut93120, _mut93121)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93122, _mut93123, _mut93124, _mut93125, _mut93126))) && ROR_less(z, zval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93128, _mut93129, _mut93130, _mut93131, _mut93132)) : ((_mut93127 ? ((_mut93117 ? ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) && ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116)) : ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) || ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116))) && ROR_greater(y, yval[AOR_minus(yval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93118, _mut93119, _mut93120, _mut93121)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93122, _mut93123, _mut93124, _mut93125, _mut93126)) : ((_mut93117 ? ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) && ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116)) : ((_mut93111 ? (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) && ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110)) : (ROR_less(x, xval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93097, _mut93098, _mut93099, _mut93100, _mut93101) || ROR_greater(x, xval[AOR_minus(xval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93102, _mut93103, _mut93104, _mut93105)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93106, _mut93107, _mut93108, _mut93109, _mut93110))) || ROR_less(y, yval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93112, _mut93113, _mut93114, _mut93115, _mut93116))) || ROR_greater(y, yval[AOR_minus(yval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93118, _mut93119, _mut93120, _mut93121)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93122, _mut93123, _mut93124, _mut93125, _mut93126))) || ROR_less(z, zval[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93128, _mut93129, _mut93130, _mut93131, _mut93132))) || ROR_greater(z, zval[AOR_minus(zval.length, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93134, _mut93135, _mut93136, _mut93137)], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.isValidPoint_342", _mut93138, _mut93139, _mut93140, _mut93141, _mut93142)))) {
            return false;
        } else {
            return true;
        }
    }

    /**
     * @param c Coordinate.
     * @param val Coordinate samples.
     * @return the index in {@code val} corresponding to the interval containing {@code c}, or {@code -1}
     *   if {@code c} is out of the range defined by the end values of {@code val}.
     */
    private int searchIndex(double c, double[] val) {
        br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.searchIndex_361");
        if (ROR_less(c, val[0], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.searchIndex_361", _mut93144, _mut93145, _mut93146, _mut93147, _mut93148)) {
            return -1;
        }
        final int max = val.length;
        for (int i = 1; ROR_less(i, max, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.searchIndex_361", _mut93158, _mut93159, _mut93160, _mut93161, _mut93162); i++) {
            br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.searchIndex_361");
            if (ROR_less_equals(c, val[i], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.searchIndex_361", _mut93149, _mut93150, _mut93151, _mut93152, _mut93153)) {
                return AOR_minus(i, 1, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.searchIndex_361", _mut93154, _mut93155, _mut93156, _mut93157);
            }
        }
        return -1;
    }

    /**
     * Compute the spline coefficients from the list of function values and
     * function partial derivatives values at the four corners of a grid
     * element. They must be specified in the following order:
     * <ul>
     *  <li>f(0,0,0)</li>
     *  <li>f(1,0,0)</li>
     *  <li>f(0,1,0)</li>
     *  <li>f(1,1,0)</li>
     *  <li>f(0,0,1)</li>
     *  <li>f(1,0,1)</li>
     *  <li>f(0,1,1)</li>
     *  <li>f(1,1,1)</li>
     *
     *  <li>f<sub>x</sub>(0,0,0)</li>
     *  <li>... <em>(same order as above)</em></li>
     *  <li>f<sub>x</sub>(1,1,1)</li>
     *
     *  <li>f<sub>y</sub>(0,0,0)</li>
     *  <li>... <em>(same order as above)</em></li>
     *  <li>f<sub>y</sub>(1,1,1)</li>
     *
     *  <li>f<sub>z</sub>(0,0,0)</li>
     *  <li>... <em>(same order as above)</em></li>
     *  <li>f<sub>z</sub>(1,1,1)</li>
     *
     *  <li>f<sub>xy</sub>(0,0,0)</li>
     *  <li>... <em>(same order as above)</em></li>
     *  <li>f<sub>xy</sub>(1,1,1)</li>
     *
     *  <li>f<sub>xz</sub>(0,0,0)</li>
     *  <li>... <em>(same order as above)</em></li>
     *  <li>f<sub>xz</sub>(1,1,1)</li>
     *
     *  <li>f<sub>yz</sub>(0,0,0)</li>
     *  <li>... <em>(same order as above)</em></li>
     *  <li>f<sub>yz</sub>(1,1,1)</li>
     *
     *  <li>f<sub>xyz</sub>(0,0,0)</li>
     *  <li>... <em>(same order as above)</em></li>
     *  <li>f<sub>xyz</sub>(1,1,1)</li>
     * </ul>
     * where the subscripts indicate the partial derivative with respect to
     * the corresponding variable(s).
     *
     * @param beta List of function values and function partial derivatives values.
     * @return the spline coefficients.
     */
    private double[] computeCoefficients(double[] beta) {
        br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.computeCoefficients_424");
        final int sz = 64;
        final double[] a = new double[sz];
        for (int i = 0; ROR_less(i, sz, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.computeCoefficients_424", _mut93172, _mut93173, _mut93174, _mut93175, _mut93176); i++) {
            br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.computeCoefficients_424");
            double result = 0;
            final double[] row = AINV[i];
            for (int j = 0; ROR_less(j, sz, "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.computeCoefficients_424", _mut93167, _mut93168, _mut93169, _mut93170, _mut93171); j++) {
                br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.computeCoefficients_424");
                result += AOR_multiply(row[j], beta[j], "org.apache.commons.math3.analysis.interpolation.TricubicInterpolatingFunction.computeCoefficients_424", _mut93163, _mut93164, _mut93165, _mut93166);
            }
            a[i] = result;
        }
        return a;
    }
}

/**
 * 3D-spline function.
 */
class TricubicFunction implements TrivariateFunction {

    @Conditional
    public static boolean _mut93177 = false, _mut93178 = false, _mut93179 = false, _mut93180 = false, _mut93181 = false, _mut93182 = false, _mut93183 = false, _mut93184 = false, _mut93185 = false, _mut93186 = false, _mut93187 = false, _mut93188 = false, _mut93189 = false, _mut93190 = false, _mut93191 = false, _mut93192 = false, _mut93193 = false, _mut93194 = false, _mut93195 = false, _mut93196 = false, _mut93197 = false, _mut93198 = false, _mut93199 = false, _mut93200 = false, _mut93201 = false, _mut93202 = false, _mut93203 = false, _mut93204 = false, _mut93205 = false, _mut93206 = false, _mut93207 = false, _mut93208 = false, _mut93209 = false, _mut93210 = false, _mut93211 = false, _mut93212 = false, _mut93213 = false, _mut93214 = false, _mut93215 = false, _mut93216 = false, _mut93217 = false, _mut93218 = false, _mut93219 = false, _mut93220 = false, _mut93221 = false, _mut93222 = false, _mut93223 = false, _mut93224 = false, _mut93225 = false, _mut93226 = false, _mut93227 = false, _mut93228 = false, _mut93229 = false, _mut93230 = false, _mut93231 = false, _mut93232 = false, _mut93233 = false, _mut93234 = false, _mut93235 = false, _mut93236 = false, _mut93237 = false, _mut93238 = false, _mut93239 = false, _mut93240 = false, _mut93241 = false, _mut93242 = false, _mut93243 = false, _mut93244 = false, _mut93245 = false, _mut93246 = false, _mut93247 = false, _mut93248 = false, _mut93249 = false, _mut93250 = false, _mut93251 = false, _mut93252 = false, _mut93253 = false, _mut93254 = false, _mut93255 = false, _mut93256 = false, _mut93257 = false, _mut93258 = false, _mut93259 = false, _mut93260 = false, _mut93261 = false, _mut93262 = false, _mut93263 = false, _mut93264 = false, _mut93265 = false, _mut93266 = false, _mut93267 = false, _mut93268 = false, _mut93269 = false, _mut93270 = false, _mut93271 = false, _mut93272 = false, _mut93273 = false, _mut93274 = false, _mut93275 = false, _mut93276 = false, _mut93277 = false, _mut93278 = false, _mut93279 = false, _mut93280 = false, _mut93281 = false, _mut93282 = false, _mut93283 = false, _mut93284 = false, _mut93285 = false, _mut93286 = false, _mut93287 = false, _mut93288 = false, _mut93289 = false, _mut93290 = false, _mut93291 = false;

    /**
     * Number of points.
     */
    private static final short N = 4;

    /**
     * Coefficients
     */
    private final double[][][] a = new double[N][N][N];

    /**
     * @param aV List of spline coefficients.
     */
    TricubicFunction(double[] aV) {
        br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455");
        for (int i = 0; ROR_less(i, N, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455", _mut93203, _mut93204, _mut93205, _mut93206, _mut93207); i++) {
            br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455");
            for (int j = 0; ROR_less(j, N, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455", _mut93198, _mut93199, _mut93200, _mut93201, _mut93202); j++) {
                br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455");
                for (int k = 0; ROR_less(k, N, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455", _mut93193, _mut93194, _mut93195, _mut93196, _mut93197); k++) {
                    br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455");
                    a[i][j][k] = aV[AOR_plus(i, AOR_multiply(N, (AOR_plus(j, AOR_multiply(N, k, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455", _mut93177, _mut93178, _mut93179, _mut93180), "org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455", _mut93181, _mut93182, _mut93183, _mut93184)), "org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455", _mut93185, _mut93186, _mut93187, _mut93188), "org.apache.commons.math3.analysis.interpolation.TricubicFunction.TricubicFunction_455", _mut93189, _mut93190, _mut93191, _mut93192)];
                }
            }
        }
    }

    /**
     * @param x x-coordinate of the interpolation point.
     * @param y y-coordinate of the interpolation point.
     * @param z z-coordinate of the interpolation point.
     * @return the interpolated value.
     * @throws OutOfRangeException if {@code x}, {@code y} or
     * {@code z} are not in the interval {@code [0, 1]}.
     */
    public double value(double x, double y, double z) throws OutOfRangeException {
        br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473");
        if ((_mut93218 ? (ROR_less(x, 0, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93208, _mut93209, _mut93210, _mut93211, _mut93212) && ROR_greater(x, 1, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93213, _mut93214, _mut93215, _mut93216, _mut93217)) : (ROR_less(x, 0, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93208, _mut93209, _mut93210, _mut93211, _mut93212) || ROR_greater(x, 1, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93213, _mut93214, _mut93215, _mut93216, _mut93217)))) {
            throw new OutOfRangeException(x, 0, 1);
        }
        if ((_mut93229 ? (ROR_less(y, 0, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93219, _mut93220, _mut93221, _mut93222, _mut93223) && ROR_greater(y, 1, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93224, _mut93225, _mut93226, _mut93227, _mut93228)) : (ROR_less(y, 0, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93219, _mut93220, _mut93221, _mut93222, _mut93223) || ROR_greater(y, 1, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93224, _mut93225, _mut93226, _mut93227, _mut93228)))) {
            throw new OutOfRangeException(y, 0, 1);
        }
        if ((_mut93240 ? (ROR_less(z, 0, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93230, _mut93231, _mut93232, _mut93233, _mut93234) && ROR_greater(z, 1, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93235, _mut93236, _mut93237, _mut93238, _mut93239)) : (ROR_less(z, 0, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93230, _mut93231, _mut93232, _mut93233, _mut93234) || ROR_greater(z, 1, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93235, _mut93236, _mut93237, _mut93238, _mut93239)))) {
            throw new OutOfRangeException(z, 0, 1);
        }
        final double x2 = AOR_multiply(x, x, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93241, _mut93242, _mut93243, _mut93244);
        final double x3 = AOR_multiply(x2, x, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93245, _mut93246, _mut93247, _mut93248);
        final double[] pX = { 1, x, x2, x3 };
        final double y2 = AOR_multiply(y, y, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93249, _mut93250, _mut93251, _mut93252);
        final double y3 = AOR_multiply(y2, y, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93253, _mut93254, _mut93255, _mut93256);
        final double[] pY = { 1, y, y2, y3 };
        final double z2 = AOR_multiply(z, z, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93257, _mut93258, _mut93259, _mut93260);
        final double z3 = AOR_multiply(z2, z, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93261, _mut93262, _mut93263, _mut93264);
        final double[] pZ = { 1, z, z2, z3 };
        double result = 0;
        for (int i = 0; ROR_less(i, N, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93287, _mut93288, _mut93289, _mut93290, _mut93291); i++) {
            br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473");
            for (int j = 0; ROR_less(j, N, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93282, _mut93283, _mut93284, _mut93285, _mut93286); j++) {
                br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473");
                for (int k = 0; ROR_less(k, N, "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93277, _mut93278, _mut93279, _mut93280, _mut93281); k++) {
                    br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473");
                    result += AOR_multiply(AOR_multiply(AOR_multiply(a[i][j][k], pX[i], "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93265, _mut93266, _mut93267, _mut93268), pY[j], "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93269, _mut93270, _mut93271, _mut93272), pZ[k], "org.apache.commons.math3.analysis.interpolation.TricubicFunction.value_473", _mut93273, _mut93274, _mut93275, _mut93276);
                }
            }
        }
        return result;
    }
}
