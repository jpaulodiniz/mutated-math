/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.commons.math3.ode.nonstiff;

import org.apache.commons.math3.util.FastMath;
import gov.nasa.jpf.annotation.Conditional;
import static br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.*;

public class DormandPrince853Integrator extends EmbeddedRungeKuttaIntegrator {

    @Conditional
    public static boolean _mut15496 = false, _mut15497 = false, _mut15498 = false, _mut15499 = false, _mut15500 = false, _mut15501 = false, _mut15502 = false, _mut15503 = false, _mut15504 = false, _mut15505 = false, _mut15506 = false, _mut15507 = false, _mut15508 = false, _mut15509 = false, _mut15510 = false, _mut15511 = false, _mut15512 = false, _mut15513 = false, _mut15514 = false, _mut15515 = false, _mut15516 = false, _mut15517 = false, _mut15518 = false, _mut15519 = false, _mut15520 = false, _mut15521 = false, _mut15522 = false, _mut15523 = false, _mut15524 = false, _mut15525 = false, _mut15526 = false, _mut15527 = false, _mut15528 = false, _mut15529 = false, _mut15530 = false, _mut15531 = false, _mut15532 = false, _mut15533 = false, _mut15534 = false, _mut15535 = false, _mut15536 = false, _mut15537 = false, _mut15538 = false, _mut15539 = false, _mut15540 = false, _mut15541 = false, _mut15542 = false, _mut15543 = false, _mut15544 = false, _mut15545 = false, _mut15546 = false, _mut15547 = false, _mut15548 = false, _mut15549 = false, _mut15550 = false, _mut15551 = false, _mut15552 = false, _mut15553 = false, _mut15554 = false, _mut15555 = false, _mut15556 = false, _mut15557 = false, _mut15558 = false, _mut15559 = false, _mut15560 = false, _mut15561 = false, _mut15562 = false, _mut15563 = false, _mut15564 = false, _mut15565 = false, _mut15566 = false, _mut15567 = false, _mut15568 = false, _mut15569 = false, _mut15570 = false, _mut15571 = false, _mut15572 = false, _mut15573 = false, _mut15574 = false, _mut15575 = false, _mut15576 = false, _mut15577 = false, _mut15578 = false, _mut15579 = false, _mut15580 = false, _mut15581 = false, _mut15582 = false, _mut15583 = false, _mut15584 = false, _mut15585 = false, _mut15586 = false, _mut15587 = false, _mut15588 = false, _mut15589 = false, _mut15590 = false, _mut15591 = false, _mut15592 = false, _mut15593 = false, _mut15594 = false, _mut15595 = false, _mut15596 = false, _mut15597 = false, _mut15598 = false, _mut15599 = false, _mut15600 = false, _mut15601 = false, _mut15602 = false, _mut15603 = false, _mut15604 = false, _mut15605 = false, _mut15606 = false, _mut15607 = false, _mut15608 = false, _mut15609 = false, _mut15610 = false, _mut15611 = false, _mut15612 = false, _mut15613 = false, _mut15614 = false, _mut15615 = false, _mut15616 = false, _mut15617 = false, _mut15618 = false, _mut15619 = false, _mut15620 = false, _mut15621 = false, _mut15622 = false, _mut15623 = false, _mut15624 = false, _mut15625 = false, _mut15626 = false, _mut15627 = false, _mut15628 = false, _mut15629 = false, _mut15630 = false, _mut15631 = false, _mut15632 = false, _mut15633 = false, _mut15634 = false, _mut15635 = false, _mut15636 = false, _mut15637 = false, _mut15638 = false, _mut15639 = false, _mut15640 = false, _mut15641 = false, _mut15642 = false, _mut15643 = false, _mut15644 = false, _mut15645 = false, _mut15646 = false, _mut15647 = false, _mut15648 = false, _mut15649 = false, _mut15650 = false, _mut15651 = false, _mut15652 = false, _mut15653 = false, _mut15654 = false, _mut15655 = false, _mut15656 = false, _mut15657 = false, _mut15658 = false, _mut15659 = false, _mut15660 = false, _mut15661 = false, _mut15662 = false, _mut15663 = false, _mut15664 = false, _mut15665 = false, _mut15666 = false, _mut15667 = false, _mut15668 = false, _mut15669 = false, _mut15670 = false, _mut15671 = false, _mut15672 = false, _mut15673 = false, _mut15674 = false, _mut15675 = false, _mut15676 = false, _mut15677 = false, _mut15678 = false, _mut15679 = false, _mut15680 = false, _mut15681 = false, _mut15682 = false, _mut15683 = false, _mut15684 = false, _mut15685 = false, _mut15686 = false, _mut15687 = false, _mut15688 = false, _mut15689 = false, _mut15690 = false, _mut15691 = false, _mut15692 = false, _mut15693 = false, _mut15694 = false, _mut15695 = false, _mut15696 = false, _mut15697 = false, _mut15698 = false, _mut15699 = false, _mut15700 = false, _mut15701 = false, _mut15702 = false, _mut15703 = false, _mut15704 = false, _mut15705 = false, _mut15706 = false, _mut15707 = false, _mut15708 = false, _mut15709 = false, _mut15710 = false, _mut15711 = false, _mut15712 = false, _mut15713 = false, _mut15714 = false, _mut15715 = false, _mut15716 = false, _mut15717 = false, _mut15718 = false, _mut15719 = false, _mut15720 = false, _mut15721 = false, _mut15722 = false, _mut15723 = false, _mut15724 = false, _mut15725 = false, _mut15726 = false, _mut15727 = false, _mut15728 = false, _mut15729 = false, _mut15730 = false, _mut15731 = false, _mut15732 = false, _mut15733 = false, _mut15734 = false, _mut15735 = false, _mut15736 = false, _mut15737 = false, _mut15738 = false, _mut15739 = false, _mut15740 = false, _mut15741 = false, _mut15742 = false, _mut15743 = false, _mut15744 = false, _mut15745 = false, _mut15746 = false, _mut15747 = false, _mut15748 = false, _mut15749 = false, _mut15750 = false, _mut15751 = false, _mut15752 = false, _mut15753 = false, _mut15754 = false, _mut15755 = false, _mut15756 = false, _mut15757 = false, _mut15758 = false, _mut15759 = false, _mut15760 = false, _mut15761 = false, _mut15762 = false, _mut15763 = false, _mut15764 = false, _mut15765 = false, _mut15766 = false, _mut15767 = false, _mut15768 = false, _mut15769 = false, _mut15770 = false, _mut15771 = false, _mut15772 = false, _mut15773 = false, _mut15774 = false, _mut15775 = false, _mut15776 = false, _mut15777 = false, _mut15778 = false, _mut15779 = false, _mut15780 = false, _mut15781 = false, _mut15782 = false, _mut15783 = false, _mut15784 = false, _mut15785 = false, _mut15786 = false, _mut15787 = false, _mut15788 = false, _mut15789 = false, _mut15790 = false, _mut15791 = false, _mut15792 = false, _mut15793 = false, _mut15794 = false, _mut15795 = false, _mut15796 = false, _mut15797 = false, _mut15798 = false, _mut15799 = false, _mut15800 = false, _mut15801 = false, _mut15802 = false, _mut15803 = false, _mut15804 = false, _mut15805 = false, _mut15806 = false, _mut15807 = false, _mut15808 = false, _mut15809 = false, _mut15810 = false, _mut15811 = false, _mut15812 = false, _mut15813 = false, _mut15814 = false, _mut15815 = false, _mut15816 = false, _mut15817 = false, _mut15818 = false, _mut15819 = false, _mut15820 = false, _mut15821 = false, _mut15822 = false, _mut15823 = false, _mut15824 = false, _mut15825 = false, _mut15826 = false, _mut15827 = false, _mut15828 = false, _mut15829 = false, _mut15830 = false, _mut15831 = false, _mut15832 = false, _mut15833 = false, _mut15834 = false, _mut15835 = false, _mut15836 = false, _mut15837 = false, _mut15838 = false, _mut15839 = false, _mut15840 = false, _mut15841 = false, _mut15842 = false, _mut15843 = false, _mut15844 = false, _mut15845 = false, _mut15846 = false, _mut15847 = false, _mut15848 = false, _mut15849 = false, _mut15850 = false, _mut15851 = false, _mut15852 = false, _mut15853 = false, _mut15854 = false, _mut15855 = false, _mut15856 = false, _mut15857 = false, _mut15858 = false, _mut15859 = false, _mut15860 = false, _mut15861 = false, _mut15862 = false, _mut15863 = false, _mut15864 = false, _mut15865 = false, _mut15866 = false, _mut15867 = false, _mut15868 = false, _mut15869 = false, _mut15870 = false, _mut15871 = false, _mut15872 = false, _mut15873 = false, _mut15874 = false, _mut15875 = false, _mut15876 = false, _mut15877 = false, _mut15878 = false, _mut15879 = false, _mut15880 = false, _mut15881 = false, _mut15882 = false, _mut15883 = false, _mut15884 = false, _mut15885 = false, _mut15886 = false, _mut15887 = false, _mut15888 = false, _mut15889 = false, _mut15890 = false, _mut15891 = false, _mut15892 = false, _mut15893 = false, _mut15894 = false, _mut15895 = false, _mut15896 = false, _mut15897 = false, _mut15898 = false, _mut15899 = false, _mut15900 = false, _mut15901 = false, _mut15902 = false, _mut15903 = false, _mut15904 = false, _mut15905 = false, _mut15906 = false, _mut15907 = false, _mut15908 = false, _mut15909 = false, _mut15910 = false, _mut15911 = false, _mut15912 = false, _mut15913 = false, _mut15914 = false, _mut15915 = false, _mut15916 = false, _mut15917 = false, _mut15918 = false, _mut15919 = false, _mut15920 = false, _mut15921 = false, _mut15922 = false, _mut15923 = false, _mut15924 = false, _mut15925 = false, _mut15926 = false, _mut15927 = false, _mut15928 = false, _mut15929 = false, _mut15930 = false, _mut15931 = false, _mut15932 = false, _mut15933 = false, _mut15934 = false, _mut15935 = false, _mut15936 = false, _mut15937 = false, _mut15938 = false, _mut15939 = false, _mut15940 = false, _mut15941 = false, _mut15942 = false, _mut15943 = false, _mut15944 = false, _mut15945 = false, _mut15946 = false, _mut15947 = false, _mut15948 = false, _mut15949 = false, _mut15950 = false, _mut15951 = false, _mut15952 = false, _mut15953 = false, _mut15954 = false, _mut15955 = false, _mut15956 = false, _mut15957 = false, _mut15958 = false, _mut15959 = false, _mut15960 = false, _mut15961 = false, _mut15962 = false, _mut15963 = false, _mut15964 = false, _mut15965 = false, _mut15966 = false, _mut15967 = false, _mut15968 = false, _mut15969 = false, _mut15970 = false, _mut15971 = false, _mut15972 = false, _mut15973 = false, _mut15974 = false, _mut15975 = false, _mut15976 = false, _mut15977 = false, _mut15978 = false, _mut15979 = false, _mut15980 = false, _mut15981 = false, _mut15982 = false, _mut15983 = false, _mut15984 = false, _mut15985 = false, _mut15986 = false, _mut15987 = false, _mut15988 = false, _mut15989 = false, _mut15990 = false, _mut15991 = false, _mut15992 = false, _mut15993 = false, _mut15994 = false, _mut15995 = false, _mut15996 = false, _mut15997 = false, _mut15998 = false, _mut15999 = false, _mut16000 = false, _mut16001 = false, _mut16002 = false, _mut16003 = false, _mut16004 = false, _mut16005 = false, _mut16006 = false, _mut16007 = false, _mut16008 = false, _mut16009 = false, _mut16010 = false, _mut16011 = false, _mut16012 = false, _mut16013 = false, _mut16014 = false, _mut16015 = false, _mut16016 = false, _mut16017 = false, _mut16018 = false, _mut16019 = false, _mut16020 = false, _mut16021 = false, _mut16022 = false, _mut16023 = false, _mut16024 = false, _mut16025 = false, _mut16026 = false, _mut16027 = false, _mut16028 = false, _mut16029 = false, _mut16030 = false, _mut16031 = false, _mut16032 = false, _mut16033 = false, _mut16034 = false, _mut16035 = false, _mut16036 = false, _mut16037 = false, _mut16038 = false, _mut16039 = false, _mut16040 = false, _mut16041 = false, _mut16042 = false, _mut16043 = false, _mut16044 = false, _mut16045 = false, _mut16046 = false, _mut16047 = false, _mut16048 = false, _mut16049 = false, _mut16050 = false, _mut16051 = false, _mut16052 = false, _mut16053 = false, _mut16054 = false, _mut16055 = false, _mut16056 = false, _mut16057 = false, _mut16058 = false, _mut16059 = false, _mut16060 = false, _mut16061 = false, _mut16062 = false, _mut16063 = false, _mut16064 = false, _mut16065 = false, _mut16066 = false, _mut16067 = false, _mut16068 = false, _mut16069 = false, _mut16070 = false, _mut16071 = false, _mut16072 = false, _mut16073 = false, _mut16074 = false, _mut16075 = false, _mut16076 = false, _mut16077 = false, _mut16078 = false, _mut16079 = false, _mut16080 = false, _mut16081 = false, _mut16082 = false, _mut16083 = false, _mut16084 = false, _mut16085 = false, _mut16086 = false, _mut16087 = false, _mut16088 = false, _mut16089 = false, _mut16090 = false, _mut16091 = false, _mut16092 = false, _mut16093 = false, _mut16094 = false, _mut16095 = false, _mut16096 = false, _mut16097 = false, _mut16098 = false, _mut16099 = false, _mut16100 = false, _mut16101 = false, _mut16102 = false, _mut16103 = false, _mut16104 = false, _mut16105 = false, _mut16106 = false, _mut16107 = false, _mut16108 = false, _mut16109 = false, _mut16110 = false, _mut16111 = false, _mut16112 = false, _mut16113 = false, _mut16114 = false, _mut16115 = false, _mut16116 = false, _mut16117 = false, _mut16118 = false, _mut16119 = false, _mut16120 = false, _mut16121 = false, _mut16122 = false, _mut16123 = false, _mut16124 = false, _mut16125 = false, _mut16126 = false, _mut16127 = false, _mut16128 = false, _mut16129 = false, _mut16130 = false, _mut16131 = false, _mut16132 = false, _mut16133 = false, _mut16134 = false, _mut16135 = false, _mut16136 = false, _mut16137 = false, _mut16138 = false, _mut16139 = false, _mut16140 = false, _mut16141 = false, _mut16142 = false, _mut16143 = false, _mut16144 = false, _mut16145 = false, _mut16146 = false, _mut16147 = false, _mut16148 = false, _mut16149 = false, _mut16150 = false, _mut16151 = false, _mut16152 = false, _mut16153 = false, _mut16154 = false, _mut16155 = false, _mut16156 = false, _mut16157 = false, _mut16158 = false, _mut16159 = false, _mut16160 = false, _mut16161 = false, _mut16162 = false, _mut16163 = false, _mut16164 = false, _mut16165 = false, _mut16166 = false, _mut16167 = false, _mut16168 = false, _mut16169 = false, _mut16170 = false, _mut16171 = false, _mut16172 = false, _mut16173 = false, _mut16174 = false, _mut16175 = false, _mut16176 = false, _mut16177 = false, _mut16178 = false, _mut16179 = false, _mut16180 = false, _mut16181 = false, _mut16182 = false, _mut16183 = false, _mut16184 = false, _mut16185 = false, _mut16186 = false, _mut16187 = false, _mut16188 = false, _mut16189 = false, _mut16190 = false, _mut16191 = false, _mut16192 = false, _mut16193 = false, _mut16194 = false, _mut16195 = false, _mut16196 = false, _mut16197 = false, _mut16198 = false, _mut16199 = false, _mut16200 = false, _mut16201 = false, _mut16202 = false, _mut16203 = false, _mut16204 = false, _mut16205 = false, _mut16206 = false, _mut16207 = false, _mut16208 = false, _mut16209 = false, _mut16210 = false, _mut16211 = false, _mut16212 = false, _mut16213 = false, _mut16214 = false, _mut16215 = false, _mut16216 = false, _mut16217 = false;

    /**
     * Integrator method name.
     */
    private static final String METHOD_NAME = "Dormand-Prince 8 (5, 3)";

    /**
     * Time steps Butcher array.
     */
    private static final double[] STATIC_C = { AOR_divide((AOR_minus(12.0, AOR_multiply(2.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15496, _mut15497, _mut15498, _mut15499), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15500, _mut15501, _mut15502, _mut15503)), 135.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15504, _mut15505, _mut15506, _mut15507), AOR_divide((AOR_minus(6.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15508, _mut15509, _mut15510, _mut15511)), 45.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15512, _mut15513, _mut15514, _mut15515), AOR_divide((AOR_minus(6.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15516, _mut15517, _mut15518, _mut15519)), 30.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15520, _mut15521, _mut15522, _mut15523), AOR_divide((AOR_plus(6.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15524, _mut15525, _mut15526, _mut15527)), 30.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15528, _mut15529, _mut15530, _mut15531), AOR_divide(1.0, 3.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15532, _mut15533, _mut15534, _mut15535), AOR_divide(1.0, 4.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15536, _mut15537, _mut15538, _mut15539), AOR_divide(4.0, 13.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15540, _mut15541, _mut15542, _mut15543), AOR_divide(127.0, 195.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15544, _mut15545, _mut15546, _mut15547), AOR_divide(3.0, 5.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15548, _mut15549, _mut15550, _mut15551), AOR_divide(6.0, 7.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15552, _mut15553, _mut15554, _mut15555), 1.0, 1.0 };

    /**
     * Internal weights Butcher array.
     */
    private static final double[][] STATIC_A = { // k2
    { AOR_divide((AOR_minus(12.0, AOR_multiply(2.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15556, _mut15557, _mut15558, _mut15559), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15560, _mut15561, _mut15562, _mut15563)), 135.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15564, _mut15565, _mut15566, _mut15567) }, // k3
    { AOR_divide((AOR_minus(6.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15568, _mut15569, _mut15570, _mut15571)), 180.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15572, _mut15573, _mut15574, _mut15575), AOR_divide((AOR_minus(6.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15576, _mut15577, _mut15578, _mut15579)), 60.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15580, _mut15581, _mut15582, _mut15583) }, // k4
    { AOR_divide((AOR_minus(6.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15584, _mut15585, _mut15586, _mut15587)), 120.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15588, _mut15589, _mut15590, _mut15591), 0.0, AOR_divide((AOR_minus(6.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15592, _mut15593, _mut15594, _mut15595)), 40.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15596, _mut15597, _mut15598, _mut15599) }, // k5
    { AOR_divide((AOR_plus(462.0, AOR_multiply(107.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15600, _mut15601, _mut15602, _mut15603), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15604, _mut15605, _mut15606, _mut15607)), 3000.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15608, _mut15609, _mut15610, _mut15611), 0.0, AOR_divide((AOR_minus(-402.0, AOR_multiply(197.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15612, _mut15613, _mut15614, _mut15615), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15616, _mut15617, _mut15618, _mut15619)), 1000.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15620, _mut15621, _mut15622, _mut15623), AOR_divide((AOR_plus(168.0, AOR_multiply(73.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15624, _mut15625, _mut15626, _mut15627), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15628, _mut15629, _mut15630, _mut15631)), 375.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15632, _mut15633, _mut15634, _mut15635) }, // k6
    { AOR_divide(1.0, 27.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15636, _mut15637, _mut15638, _mut15639), 0.0, 0.0, AOR_divide((AOR_plus(16.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15640, _mut15641, _mut15642, _mut15643)), 108.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15644, _mut15645, _mut15646, _mut15647), AOR_divide((AOR_minus(16.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15648, _mut15649, _mut15650, _mut15651)), 108.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15652, _mut15653, _mut15654, _mut15655) }, // k7
    { AOR_divide(19.0, 512.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15656, _mut15657, _mut15658, _mut15659), 0.0, 0.0, AOR_divide((AOR_plus(118.0, AOR_multiply(23.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15660, _mut15661, _mut15662, _mut15663), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15664, _mut15665, _mut15666, _mut15667)), 1024.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15668, _mut15669, _mut15670, _mut15671), AOR_divide((AOR_minus(118.0, AOR_multiply(23.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15672, _mut15673, _mut15674, _mut15675), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15676, _mut15677, _mut15678, _mut15679)), 1024.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15680, _mut15681, _mut15682, _mut15683), AOR_divide(-9.0, 512.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15684, _mut15685, _mut15686, _mut15687) }, // k8
    { AOR_divide(13772.0, 371293.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15688, _mut15689, _mut15690, _mut15691), 0.0, 0.0, AOR_divide((AOR_plus(51544.0, AOR_multiply(4784.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15692, _mut15693, _mut15694, _mut15695), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15696, _mut15697, _mut15698, _mut15699)), 371293.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15700, _mut15701, _mut15702, _mut15703), AOR_divide((AOR_minus(51544.0, AOR_multiply(4784.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15704, _mut15705, _mut15706, _mut15707), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15708, _mut15709, _mut15710, _mut15711)), 371293.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15712, _mut15713, _mut15714, _mut15715), AOR_divide(-5688.0, 371293.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15716, _mut15717, _mut15718, _mut15719), AOR_divide(3072.0, 371293.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15720, _mut15721, _mut15722, _mut15723) }, // k9
    { AOR_divide(58656157643.0, 93983540625.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15724, _mut15725, _mut15726, _mut15727), 0.0, 0.0, AOR_divide((AOR_minus(-1324889724104.0, AOR_multiply(318801444819.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15728, _mut15729, _mut15730, _mut15731), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15732, _mut15733, _mut15734, _mut15735)), 626556937500.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15736, _mut15737, _mut15738, _mut15739), AOR_divide((AOR_plus(-1324889724104.0, AOR_multiply(318801444819.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15740, _mut15741, _mut15742, _mut15743), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15744, _mut15745, _mut15746, _mut15747)), 626556937500.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15748, _mut15749, _mut15750, _mut15751), AOR_divide(96044563816.0, 3480871875.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15752, _mut15753, _mut15754, _mut15755), AOR_divide(5682451879168.0, 281950621875.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15756, _mut15757, _mut15758, _mut15759), AOR_divide(-165125654.0, 3796875.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15760, _mut15761, _mut15762, _mut15763) }, // k10
    { AOR_divide(8909899.0, 18653125.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15764, _mut15765, _mut15766, _mut15767), 0.0, 0.0, AOR_divide((AOR_minus(-4521408.0, AOR_multiply(1137963.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15768, _mut15769, _mut15770, _mut15771), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15772, _mut15773, _mut15774, _mut15775)), 2937500.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15776, _mut15777, _mut15778, _mut15779), AOR_divide((AOR_plus(-4521408.0, AOR_multiply(1137963.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15780, _mut15781, _mut15782, _mut15783), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15784, _mut15785, _mut15786, _mut15787)), 2937500.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15788, _mut15789, _mut15790, _mut15791), AOR_divide(96663078.0, 4553125.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15792, _mut15793, _mut15794, _mut15795), AOR_divide(2107245056.0, 137915625.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15796, _mut15797, _mut15798, _mut15799), AOR_divide(-4913652016.0, 147609375.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15800, _mut15801, _mut15802, _mut15803), AOR_divide(-78894270.0, 3880452869.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15804, _mut15805, _mut15806, _mut15807) }, // k11
    { AOR_divide(-20401265806.0, 21769653311.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15808, _mut15809, _mut15810, _mut15811), 0.0, 0.0, AOR_divide((AOR_plus(354216.0, AOR_multiply(94326.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15812, _mut15813, _mut15814, _mut15815), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15816, _mut15817, _mut15818, _mut15819)), 112847.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15820, _mut15821, _mut15822, _mut15823), AOR_divide((AOR_minus(354216.0, AOR_multiply(94326.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15824, _mut15825, _mut15826, _mut15827), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15828, _mut15829, _mut15830, _mut15831)), 112847.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15832, _mut15833, _mut15834, _mut15835), AOR_divide(-43306765128.0, 5313852383.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15836, _mut15837, _mut15838, _mut15839), AOR_divide(-20866708358144.0, 1126708119789.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15840, _mut15841, _mut15842, _mut15843), AOR_divide(14886003438020.0, 654632330667.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15844, _mut15845, _mut15846, _mut15847), AOR_divide(35290686222309375.0, 14152473387134411.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15848, _mut15849, _mut15850, _mut15851), AOR_divide(-1477884375.0, 485066827.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15852, _mut15853, _mut15854, _mut15855) }, // k12
    { AOR_divide(39815761.0, 17514443.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15856, _mut15857, _mut15858, _mut15859), 0.0, 0.0, AOR_divide((AOR_minus(-3457480.0, AOR_multiply(960905.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15860, _mut15861, _mut15862, _mut15863), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15864, _mut15865, _mut15866, _mut15867)), 551636.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15868, _mut15869, _mut15870, _mut15871), AOR_divide((AOR_plus(-3457480.0, AOR_multiply(960905.0, FastMath.sqrt(6.0), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15872, _mut15873, _mut15874, _mut15875), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15876, _mut15877, _mut15878, _mut15879)), 551636.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15880, _mut15881, _mut15882, _mut15883), AOR_divide(-844554132.0, 47026969.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15884, _mut15885, _mut15886, _mut15887), AOR_divide(8444996352.0, 302158619.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15888, _mut15889, _mut15890, _mut15891), AOR_divide(-2509602342.0, 877790785.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15892, _mut15893, _mut15894, _mut15895), AOR_divide(-28388795297996250.0, 3199510091356783.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15896, _mut15897, _mut15898, _mut15899), AOR_divide(226716250.0, 18341897.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15900, _mut15901, _mut15902, _mut15903), AOR_divide(1371316744.0, 2131383595.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15904, _mut15905, _mut15906, _mut15907) }, // here at no cost by specifying this is an fsal method
    { AOR_divide(104257.0, 1920240.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15908, _mut15909, _mut15910, _mut15911), 0.0, 0.0, 0.0, 0.0, AOR_divide(3399327.0, 763840.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15912, _mut15913, _mut15914, _mut15915), AOR_divide(66578432.0, 35198415.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15916, _mut15917, _mut15918, _mut15919), AOR_divide(-1674902723.0, 288716400.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15920, _mut15921, _mut15922, _mut15923), AOR_divide(54980371265625.0, 176692375811392.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15924, _mut15925, _mut15926, _mut15927), AOR_divide(-734375.0, 4826304.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15928, _mut15929, _mut15930, _mut15931), AOR_divide(171414593.0, 851261400.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15932, _mut15933, _mut15934, _mut15935), AOR_divide(137909.0, 3084480.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15936, _mut15937, _mut15938, _mut15939) } };

    /**
     * Propagation weights Butcher array.
     */
    private static final double[] STATIC_B = { AOR_divide(104257.0, 1920240.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15940, _mut15941, _mut15942, _mut15943), 0.0, 0.0, 0.0, 0.0, AOR_divide(3399327.0, 763840.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15944, _mut15945, _mut15946, _mut15947), AOR_divide(66578432.0, 35198415.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15948, _mut15949, _mut15950, _mut15951), AOR_divide(-1674902723.0, 288716400.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15952, _mut15953, _mut15954, _mut15955), AOR_divide(54980371265625.0, 176692375811392.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15956, _mut15957, _mut15958, _mut15959), AOR_divide(-734375.0, 4826304.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15960, _mut15961, _mut15962, _mut15963), AOR_divide(171414593.0, 851261400.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15964, _mut15965, _mut15966, _mut15967), AOR_divide(137909.0, 3084480.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15968, _mut15969, _mut15970, _mut15971), 0.0 };

    /**
     * First error weights array, element 1.
     */
    private static final double E1_01 = AOR_divide(116092271.0, 8848465920.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15972, _mut15973, _mut15974, _mut15975);

    /**
     * First error weights array, element 6.
     */
    private static final double E1_06 = AOR_divide(-1871647.0, 1527680.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15976, _mut15977, _mut15978, _mut15979);

    /**
     * First error weights array, element 7.
     */
    private static final double E1_07 = AOR_divide(-69799717.0, 140793660.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15980, _mut15981, _mut15982, _mut15983);

    /**
     * First error weights array, element 8.
     */
    private static final double E1_08 = AOR_divide(1230164450203.0, 739113984000.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15984, _mut15985, _mut15986, _mut15987);

    /**
     * First error weights array, element 9.
     */
    private static final double E1_09 = AOR_divide(-1980813971228885.0, 5654156025964544.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15988, _mut15989, _mut15990, _mut15991);

    /**
     * First error weights array, element 10.
     */
    private static final double E1_10 = AOR_divide(464500805.0, 1389975552.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15992, _mut15993, _mut15994, _mut15995);

    /**
     * First error weights array, element 11.
     */
    private static final double E1_11 = AOR_divide(1606764981773.0, 19613062656000.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut15996, _mut15997, _mut15998, _mut15999);

    /**
     * First error weights array, element 12.
     */
    private static final double E1_12 = AOR_divide(-137909.0, 6168960.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut16000, _mut16001, _mut16002, _mut16003);

    /**
     * Second error weights array, element 1.
     */
    private static final double E2_01 = AOR_divide(-364463.0, 1920240.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut16004, _mut16005, _mut16006, _mut16007);

    /**
     * Second error weights array, element 6.
     */
    private static final double E2_06 = AOR_divide(3399327.0, 763840.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut16008, _mut16009, _mut16010, _mut16011);

    /**
     * Second error weights array, element 7.
     */
    private static final double E2_07 = AOR_divide(66578432.0, 35198415.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut16012, _mut16013, _mut16014, _mut16015);

    /**
     * Second error weights array, element 8.
     */
    private static final double E2_08 = AOR_divide(-1674902723.0, 288716400.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut16016, _mut16017, _mut16018, _mut16019);

    /**
     * Second error weights array, element 9.
     */
    private static final double E2_09 = AOR_divide(-74684743568175.0, 176692375811392.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut16020, _mut16021, _mut16022, _mut16023);

    /**
     * Second error weights array, element 10.
     */
    private static final double E2_10 = AOR_divide(-734375.0, 4826304.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut16024, _mut16025, _mut16026, _mut16027);

    /**
     * Second error weights array, element 11.
     */
    private static final double E2_11 = AOR_divide(171414593.0, 851261400.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut16028, _mut16029, _mut16030, _mut16031);

    /**
     * Second error weights array, element 12.
     */
    private static final double E2_12 = AOR_divide(69869.0, 3084480.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.computeInterpolatedStateAndDerivatives_77", _mut16032, _mut16033, _mut16034, _mut16035);

    /**
     * Simple constructor.
     * Build an eighth order Dormand-Prince integrator with the given step bounds
     * @param minStep minimal step (sign is irrelevant, regardless of
     * integration direction, forward or backward), the last step can
     * be smaller than this
     * @param maxStep maximal step (sign is irrelevant, regardless of
     * integration direction, forward or backward), the last step can
     * be smaller than this
     * @param scalAbsoluteTolerance allowed absolute error
     * @param scalRelativeTolerance allowed relative error
     */
    public DormandPrince853Integrator(final double minStep, final double maxStep, final double scalAbsoluteTolerance, final double scalRelativeTolerance) {
        super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B, new DormandPrince853StepInterpolator(), minStep, maxStep, scalAbsoluteTolerance, scalRelativeTolerance);
    }

    /**
     * Simple constructor.
     * Build an eighth order Dormand-Prince integrator with the given step bounds
     * @param minStep minimal step (sign is irrelevant, regardless of
     * integration direction, forward or backward), the last step can
     * be smaller than this
     * @param maxStep maximal step (sign is irrelevant, regardless of
     * integration direction, forward or backward), the last step can
     * be smaller than this
     * @param vecAbsoluteTolerance allowed absolute error
     * @param vecRelativeTolerance allowed relative error
     */
    public DormandPrince853Integrator(final double minStep, final double maxStep, final double[] vecAbsoluteTolerance, final double[] vecRelativeTolerance) {
        super(METHOD_NAME, true, STATIC_C, STATIC_A, STATIC_B, new DormandPrince853StepInterpolator(), minStep, maxStep, vecAbsoluteTolerance, vecRelativeTolerance);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public int getOrder() {
        return 8;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    protected double estimateError(final double[][] yDotK, final double[] y0, final double[] y1, final double h) {
        br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250");
        double error1 = 0;
        double error2 = 0;
        for (int j = 0; ROR_less(j, mainSetDimension, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16188, _mut16189, _mut16190, _mut16191, _mut16192); ++j) {
            br.ufmg.labsoft.mutvariants.schematalib.SchemataLibMethods.listener.listen("org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250");
            final double errSum1 = AOR_plus(AOR_plus(AOR_plus(AOR_plus(AOR_plus(AOR_plus(AOR_plus(AOR_multiply(E1_01, yDotK[0][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16036, _mut16037, _mut16038, _mut16039), AOR_multiply(E1_06, yDotK[5][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16040, _mut16041, _mut16042, _mut16043), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16044, _mut16045, _mut16046, _mut16047), AOR_multiply(E1_07, yDotK[6][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16048, _mut16049, _mut16050, _mut16051), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16052, _mut16053, _mut16054, _mut16055), AOR_multiply(E1_08, yDotK[7][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16056, _mut16057, _mut16058, _mut16059), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16060, _mut16061, _mut16062, _mut16063), AOR_multiply(E1_09, yDotK[8][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16064, _mut16065, _mut16066, _mut16067), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16068, _mut16069, _mut16070, _mut16071), AOR_multiply(E1_10, yDotK[9][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16072, _mut16073, _mut16074, _mut16075), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16076, _mut16077, _mut16078, _mut16079), AOR_multiply(E1_11, yDotK[10][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16080, _mut16081, _mut16082, _mut16083), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16084, _mut16085, _mut16086, _mut16087), AOR_multiply(E1_12, yDotK[11][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16088, _mut16089, _mut16090, _mut16091), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16092, _mut16093, _mut16094, _mut16095);
            final double errSum2 = AOR_plus(AOR_plus(AOR_plus(AOR_plus(AOR_plus(AOR_plus(AOR_plus(AOR_multiply(E2_01, yDotK[0][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16096, _mut16097, _mut16098, _mut16099), AOR_multiply(E2_06, yDotK[5][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16100, _mut16101, _mut16102, _mut16103), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16104, _mut16105, _mut16106, _mut16107), AOR_multiply(E2_07, yDotK[6][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16108, _mut16109, _mut16110, _mut16111), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16112, _mut16113, _mut16114, _mut16115), AOR_multiply(E2_08, yDotK[7][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16116, _mut16117, _mut16118, _mut16119), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16120, _mut16121, _mut16122, _mut16123), AOR_multiply(E2_09, yDotK[8][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16124, _mut16125, _mut16126, _mut16127), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16128, _mut16129, _mut16130, _mut16131), AOR_multiply(E2_10, yDotK[9][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16132, _mut16133, _mut16134, _mut16135), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16136, _mut16137, _mut16138, _mut16139), AOR_multiply(E2_11, yDotK[10][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16140, _mut16141, _mut16142, _mut16143), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16144, _mut16145, _mut16146, _mut16147), AOR_multiply(E2_12, yDotK[11][j], "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16148, _mut16149, _mut16150, _mut16151), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16152, _mut16153, _mut16154, _mut16155);
            final double yScale = FastMath.max(FastMath.abs(y0[j]), FastMath.abs(y1[j]));
            final double tol = (vecAbsoluteTolerance == null) ? (AOR_plus(scalAbsoluteTolerance, AOR_multiply(scalRelativeTolerance, yScale, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16164, _mut16165, _mut16166, _mut16167), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16168, _mut16169, _mut16170, _mut16171)) : (AOR_plus(vecAbsoluteTolerance[j], AOR_multiply(vecRelativeTolerance[j], yScale, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16156, _mut16157, _mut16158, _mut16159), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16160, _mut16161, _mut16162, _mut16163));
            final double ratio1 = AOR_divide(errSum1, tol, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16172, _mut16173, _mut16174, _mut16175);
            error1 += AOR_multiply(ratio1, ratio1, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16176, _mut16177, _mut16178, _mut16179);
            final double ratio2 = AOR_divide(errSum2, tol, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16180, _mut16181, _mut16182, _mut16183);
            error2 += AOR_multiply(ratio2, ratio2, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16184, _mut16185, _mut16186, _mut16187);
        }
        double den = AOR_plus(error1, AOR_multiply(0.01, error2, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16193, _mut16194, _mut16195, _mut16196), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16197, _mut16198, _mut16199, _mut16200);
        if (ROR_less_equals(den, 0.0, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16201, _mut16202, _mut16203, _mut16204, _mut16205)) {
            den = 1.0;
        }
        return AOR_divide(AOR_multiply(FastMath.abs(h), error1, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16206, _mut16207, _mut16208, _mut16209), FastMath.sqrt(AOR_multiply(mainSetDimension, den, "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16210, _mut16211, _mut16212, _mut16213)), "org.apache.commons.math3.ode.nonstiff.DormandPrince853Integrator.estimateError_250", _mut16214, _mut16215, _mut16216, _mut16217);
    }
}
